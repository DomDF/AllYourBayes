
// Code generated by stanc v2.30.1
#include <stan/model/model_header.hpp>
namespace corrosion_model_model_namespace {

using stan::model::model_base_crtp;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 59> locations_array__ = 
{" (found before start of program)",
 " (in '/Users/ddifrancesco/Github/Bayes-Lund2023/Bayes-Lund2023_presentation/tmp/corrosion_model.stan', line 54, column 2 to column 15)",
 " (in '/Users/ddifrancesco/Github/Bayes-Lund2023/Bayes-Lund2023_presentation/tmp/corrosion_model.stan', line 55, column 2 to column 30)",
 " (in '/Users/ddifrancesco/Github/Bayes-Lund2023/Bayes-Lund2023_presentation/tmp/corrosion_model.stan', line 59, column 2 to column 41)",
 " (in '/Users/ddifrancesco/Github/Bayes-Lund2023/Bayes-Lund2023_presentation/tmp/corrosion_model.stan', line 60, column 2 to column 39)",
 " (in '/Users/ddifrancesco/Github/Bayes-Lund2023/Bayes-Lund2023_presentation/tmp/corrosion_model.stan', line 66, column 2 to column 59)",
 " (in '/Users/ddifrancesco/Github/Bayes-Lund2023/Bayes-Lund2023_presentation/tmp/corrosion_model.stan', line 67, column 2 to column 22)",
 " (in '/Users/ddifrancesco/Github/Bayes-Lund2023/Bayes-Lund2023_presentation/tmp/corrosion_model.stan', line 71, column 4 to column 66)",
 " (in '/Users/ddifrancesco/Github/Bayes-Lund2023/Bayes-Lund2023_presentation/tmp/corrosion_model.stan', line 69, column 18 to line 73, column 3)",
 " (in '/Users/ddifrancesco/Github/Bayes-Lund2023/Bayes-Lund2023_presentation/tmp/corrosion_model.stan', line 69, column 2 to line 73, column 3)",
 " (in '/Users/ddifrancesco/Github/Bayes-Lund2023/Bayes-Lund2023_presentation/tmp/corrosion_model.stan', line 120, column 3 to column 52)",
 " (in '/Users/ddifrancesco/Github/Bayes-Lund2023/Bayes-Lund2023_presentation/tmp/corrosion_model.stan', line 85, column 6 to column 58)",
 " (in '/Users/ddifrancesco/Github/Bayes-Lund2023/Bayes-Lund2023_presentation/tmp/corrosion_model.stan', line 83, column 21 to line 87, column 5)",
 " (in '/Users/ddifrancesco/Github/Bayes-Lund2023/Bayes-Lund2023_presentation/tmp/corrosion_model.stan', line 83, column 4 to line 87, column 5)",
 " (in '/Users/ddifrancesco/Github/Bayes-Lund2023/Bayes-Lund2023_presentation/tmp/corrosion_model.stan', line 91, column 6 to column 66)",
 " (in '/Users/ddifrancesco/Github/Bayes-Lund2023/Bayes-Lund2023_presentation/tmp/corrosion_model.stan', line 89, column 22 to line 93, column 5)",
 " (in '/Users/ddifrancesco/Github/Bayes-Lund2023/Bayes-Lund2023_presentation/tmp/corrosion_model.stan', line 89, column 4 to line 93, column 5)",
 " (in '/Users/ddifrancesco/Github/Bayes-Lund2023/Bayes-Lund2023_presentation/tmp/corrosion_model.stan', line 97, column 6 to column 58)",
 " (in '/Users/ddifrancesco/Github/Bayes-Lund2023/Bayes-Lund2023_presentation/tmp/corrosion_model.stan', line 95, column 21 to line 99, column 5)",
 " (in '/Users/ddifrancesco/Github/Bayes-Lund2023/Bayes-Lund2023_presentation/tmp/corrosion_model.stan', line 95, column 4 to line 99, column 5)",
 " (in '/Users/ddifrancesco/Github/Bayes-Lund2023/Bayes-Lund2023_presentation/tmp/corrosion_model.stan', line 103, column 6 to column 66)",
 " (in '/Users/ddifrancesco/Github/Bayes-Lund2023/Bayes-Lund2023_presentation/tmp/corrosion_model.stan', line 101, column 22 to line 105, column 5)",
 " (in '/Users/ddifrancesco/Github/Bayes-Lund2023/Bayes-Lund2023_presentation/tmp/corrosion_model.stan', line 101, column 4 to line 105, column 5)",
 " (in '/Users/ddifrancesco/Github/Bayes-Lund2023/Bayes-Lund2023_presentation/tmp/corrosion_model.stan', line 81, column 19 to line 107, column 3)",
 " (in '/Users/ddifrancesco/Github/Bayes-Lund2023/Bayes-Lund2023_presentation/tmp/corrosion_model.stan', line 81, column 2 to line 107, column 3)",
 " (in '/Users/ddifrancesco/Github/Bayes-Lund2023/Bayes-Lund2023_presentation/tmp/corrosion_model.stan', line 109, column 2 to column 42)",
 " (in '/Users/ddifrancesco/Github/Bayes-Lund2023/Bayes-Lund2023_presentation/tmp/corrosion_model.stan', line 113, column 2 to column 61)",
 " (in '/Users/ddifrancesco/Github/Bayes-Lund2023/Bayes-Lund2023_presentation/tmp/corrosion_model.stan', line 114, column 2 to column 59)",
 " (in '/Users/ddifrancesco/Github/Bayes-Lund2023/Bayes-Lund2023_presentation/tmp/corrosion_model.stan', line 21, column 2 to column 20)",
 " (in '/Users/ddifrancesco/Github/Bayes-Lund2023/Bayes-Lund2023_presentation/tmp/corrosion_model.stan', line 22, column 2 to column 22)",
 " (in '/Users/ddifrancesco/Github/Bayes-Lund2023/Bayes-Lund2023_presentation/tmp/corrosion_model.stan', line 23, column 2 to column 22)",
 " (in '/Users/ddifrancesco/Github/Bayes-Lund2023/Bayes-Lund2023_presentation/tmp/corrosion_model.stan', line 25, column 22 to column 23)",
 " (in '/Users/ddifrancesco/Github/Bayes-Lund2023/Bayes-Lund2023_presentation/tmp/corrosion_model.stan', line 25, column 2 to column 25)",
 " (in '/Users/ddifrancesco/Github/Bayes-Lund2023/Bayes-Lund2023_presentation/tmp/corrosion_model.stan', line 27, column 10 to column 13)",
 " (in '/Users/ddifrancesco/Github/Bayes-Lund2023/Bayes-Lund2023_presentation/tmp/corrosion_model.stan', line 27, column 2 to column 24)",
 " (in '/Users/ddifrancesco/Github/Bayes-Lund2023/Bayes-Lund2023_presentation/tmp/corrosion_model.stan', line 28, column 10 to column 13)",
 " (in '/Users/ddifrancesco/Github/Bayes-Lund2023/Bayes-Lund2023_presentation/tmp/corrosion_model.stan', line 28, column 2 to column 24)",
 " (in '/Users/ddifrancesco/Github/Bayes-Lund2023/Bayes-Lund2023_presentation/tmp/corrosion_model.stan', line 29, column 22 to column 25)",
 " (in '/Users/ddifrancesco/Github/Bayes-Lund2023/Bayes-Lund2023_presentation/tmp/corrosion_model.stan', line 29, column 2 to column 36)",
 " (in '/Users/ddifrancesco/Github/Bayes-Lund2023/Bayes-Lund2023_presentation/tmp/corrosion_model.stan', line 30, column 22 to column 25)",
 " (in '/Users/ddifrancesco/Github/Bayes-Lund2023/Bayes-Lund2023_presentation/tmp/corrosion_model.stan', line 30, column 2 to column 36)",
 " (in '/Users/ddifrancesco/Github/Bayes-Lund2023/Bayes-Lund2023_presentation/tmp/corrosion_model.stan', line 32, column 2 to column 15)",
 " (in '/Users/ddifrancesco/Github/Bayes-Lund2023/Bayes-Lund2023_presentation/tmp/corrosion_model.stan', line 34, column 10 to column 13)",
 " (in '/Users/ddifrancesco/Github/Bayes-Lund2023/Bayes-Lund2023_presentation/tmp/corrosion_model.stan', line 34, column 2 to column 20)",
 " (in '/Users/ddifrancesco/Github/Bayes-Lund2023/Bayes-Lund2023_presentation/tmp/corrosion_model.stan', line 35, column 10 to column 13)",
 " (in '/Users/ddifrancesco/Github/Bayes-Lund2023/Bayes-Lund2023_presentation/tmp/corrosion_model.stan', line 35, column 2 to column 20)",
 " (in '/Users/ddifrancesco/Github/Bayes-Lund2023/Bayes-Lund2023_presentation/tmp/corrosion_model.stan', line 37, column 2 to column 18)",
 " (in '/Users/ddifrancesco/Github/Bayes-Lund2023/Bayes-Lund2023_presentation/tmp/corrosion_model.stan', line 38, column 2 to column 33)",
 " (in '/Users/ddifrancesco/Github/Bayes-Lund2023/Bayes-Lund2023_presentation/tmp/corrosion_model.stan', line 39, column 2 to column 35)",
 " (in '/Users/ddifrancesco/Github/Bayes-Lund2023/Bayes-Lund2023_presentation/tmp/corrosion_model.stan', line 41, column 2 to column 20)",
 " (in '/Users/ddifrancesco/Github/Bayes-Lund2023/Bayes-Lund2023_presentation/tmp/corrosion_model.stan', line 42, column 2 to column 35)",
 " (in '/Users/ddifrancesco/Github/Bayes-Lund2023/Bayes-Lund2023_presentation/tmp/corrosion_model.stan', line 59, column 22 to column 25)",
 " (in '/Users/ddifrancesco/Github/Bayes-Lund2023/Bayes-Lund2023_presentation/tmp/corrosion_model.stan', line 60, column 22 to column 25)",
 " (in '/Users/ddifrancesco/Github/Bayes-Lund2023/Bayes-Lund2023_presentation/tmp/corrosion_model.stan', line 66, column 10 to column 13)",
 " (in '/Users/ddifrancesco/Github/Bayes-Lund2023/Bayes-Lund2023_presentation/tmp/corrosion_model.stan', line 67, column 10 to column 13)",
 " (in '/Users/ddifrancesco/Github/Bayes-Lund2023/Bayes-Lund2023_presentation/tmp/corrosion_model.stan', line 7, column 4 to column 47)",
 " (in '/Users/ddifrancesco/Github/Bayes-Lund2023/Bayes-Lund2023_presentation/tmp/corrosion_model.stan', line 5, column 52 to line 9, column 3)",
 " (in '/Users/ddifrancesco/Github/Bayes-Lund2023/Bayes-Lund2023_presentation/tmp/corrosion_model.stan', line 13, column 4 to column 70)",
 " (in '/Users/ddifrancesco/Github/Bayes-Lund2023/Bayes-Lund2023_presentation/tmp/corrosion_model.stan', line 11, column 49 to line 15, column 3)"};

struct log_norm_sigma_functor__ {
  template <typename T0__, typename T1__,
            stan::require_all_t<stan::is_stan_scalar<T0__>,
                                stan::is_stan_scalar<T1__>>* = nullptr>
  stan::promote_args_t<T0__, T1__>
  operator()(const T0__& norm_mu, const T1__& norm_sigma,
             std::ostream* pstream__) const;
};
struct log_norm_mu_functor__ {
  template <typename T0__, typename T1__,
            stan::require_all_t<stan::is_stan_scalar<T0__>,
                                stan::is_stan_scalar<T1__>>* = nullptr>
  stan::promote_args_t<T0__, T1__>
  operator()(const T0__& norm_mu, const T1__& norm_sigma,
             std::ostream* pstream__) const;
};

template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>>* = nullptr>
  stan::promote_args_t<T0__, T1__>
  log_norm_sigma(const T0__& norm_mu, const T1__& norm_sigma,
                 std::ostream* pstream__) {
    using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
    int current_statement__ = 0; 
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      current_statement__ = 55;
      return stan::math::log(
               (1 +
                 (stan::math::pow(norm_sigma, 2) /
                   stan::math::pow(norm_mu, 2))));
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>>* = nullptr>
  stan::promote_args_t<T0__, T1__>
  log_norm_mu(const T0__& norm_mu, const T1__& norm_sigma,
              std::ostream* pstream__) {
    using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
    int current_statement__ = 0; 
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      current_statement__ = 57;
      return (stan::math::log(norm_mu) -
               (0.5 *
                 stan::math::pow(
                   log_norm_sigma(norm_mu, norm_sigma, pstream__), 2)));
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>>*>
stan::promote_args_t<T0__, T1__>
log_norm_sigma_functor__::operator()(const T0__& norm_mu,
                                     const T1__& norm_sigma,
                                     std::ostream* pstream__)  const
{
  return log_norm_sigma(norm_mu, norm_sigma, pstream__);
}

template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>>*>
stan::promote_args_t<T0__, T1__>
log_norm_mu_functor__::operator()(const T0__& norm_mu,
                                  const T1__& norm_sigma,
                                  std::ostream* pstream__)  const
{
  return log_norm_mu(norm_mu, norm_sigma, pstream__);
}


class corrosion_model_model final : public model_base_crtp<corrosion_model_model> {

 private:
  int N;
  int n_A;
  int n_M;
  std::vector<int> ID;
  Eigen::Matrix<double, -1, 1> depth_i1_data__;
  Eigen::Matrix<double, -1, 1> depth_i2_data__;
  Eigen::Matrix<double, -1, 1> error_i1_data__;
  Eigen::Matrix<double, -1, 1> error_i2_data__;
  double d_years;
  Eigen::Matrix<double, -1, 1> ex_1_data__;
  Eigen::Matrix<double, -1, 1> ex_2_data__;
  double mu_mu_beta;
  double sigma_mu_beta;
  double rate_sigma_beta;
  double mu_depth_imp;
  double sigma_depth_imp; 
  Eigen::Map<Eigen::Matrix<double, -1, 1>> depth_i1{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> depth_i2{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> error_i1{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> error_i2{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> ex_1{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> ex_2{nullptr, 0};
 
 public:
  ~corrosion_model_model() { }
  
  inline std::string model_name() const final { return "corrosion_model_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.30.1", "stancflags = "};
  }
  
  
  corrosion_model_model(stan::io::var_context& context__,
                        unsigned int random_seed__ = 0,
                        std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "corrosion_model_model_namespace::corrosion_model_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 28;
      context__.validate_dims("data initialization","N","int",
           std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      
      
      current_statement__ = 28;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 28;
      stan::math::check_greater_or_equal(function__, "N", N, 1);
      current_statement__ = 29;
      context__.validate_dims("data initialization","n_A","int",
           std::vector<size_t>{});
      n_A = std::numeric_limits<int>::min();
      
      
      current_statement__ = 29;
      n_A = context__.vals_i("n_A")[(1 - 1)];
      current_statement__ = 29;
      stan::math::check_greater_or_equal(function__, "n_A", n_A, 1);
      current_statement__ = 30;
      context__.validate_dims("data initialization","n_M","int",
           std::vector<size_t>{});
      n_M = std::numeric_limits<int>::min();
      
      
      current_statement__ = 30;
      n_M = context__.vals_i("n_M")[(1 - 1)];
      current_statement__ = 30;
      stan::math::check_greater_or_equal(function__, "n_M", n_M, 0);
      current_statement__ = 31;
      stan::math::validate_non_negative_index("ID", "N", N);
      current_statement__ = 32;
      context__.validate_dims("data initialization","ID","int",
           std::vector<size_t>{static_cast<size_t>(N)});
      ID = std::vector<int>(N, std::numeric_limits<int>::min());
      
      
      current_statement__ = 32;
      ID = context__.vals_i("ID");
      current_statement__ = 32;
      stan::math::check_greater_or_equal(function__, "ID", ID, 1);
      current_statement__ = 33;
      stan::math::validate_non_negative_index("depth_i1", "n_A", n_A);
      current_statement__ = 34;
      context__.validate_dims("data initialization","depth_i1","double",
           std::vector<size_t>{static_cast<size_t>(n_A)});
      depth_i1_data__ = 
        Eigen::Matrix<double, -1, 1>::Constant(n_A,
          std::numeric_limits<double>::quiet_NaN());
      new (&depth_i1) Eigen::Map<Eigen::Matrix<double, -1, 1>>(depth_i1_data__.data(), n_A);
        
      
      {
        std::vector<local_scalar_t__> depth_i1_flat__;
        current_statement__ = 34;
        depth_i1_flat__ = context__.vals_r("depth_i1");
        current_statement__ = 34;
        pos__ = 1;
        current_statement__ = 34;
        for (int sym1__ = 1; sym1__ <= n_A; ++sym1__) {
          current_statement__ = 34;
          stan::model::assign(depth_i1, depth_i1_flat__[(pos__ - 1)],
            "assigning variable depth_i1", stan::model::index_uni(sym1__));
          current_statement__ = 34;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 35;
      stan::math::validate_non_negative_index("depth_i2", "n_A", n_A);
      current_statement__ = 36;
      context__.validate_dims("data initialization","depth_i2","double",
           std::vector<size_t>{static_cast<size_t>(n_A)});
      depth_i2_data__ = 
        Eigen::Matrix<double, -1, 1>::Constant(n_A,
          std::numeric_limits<double>::quiet_NaN());
      new (&depth_i2) Eigen::Map<Eigen::Matrix<double, -1, 1>>(depth_i2_data__.data(), n_A);
        
      
      {
        std::vector<local_scalar_t__> depth_i2_flat__;
        current_statement__ = 36;
        depth_i2_flat__ = context__.vals_r("depth_i2");
        current_statement__ = 36;
        pos__ = 1;
        current_statement__ = 36;
        for (int sym1__ = 1; sym1__ <= n_A; ++sym1__) {
          current_statement__ = 36;
          stan::model::assign(depth_i2, depth_i2_flat__[(pos__ - 1)],
            "assigning variable depth_i2", stan::model::index_uni(sym1__));
          current_statement__ = 36;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 37;
      stan::math::validate_non_negative_index("error_i1", "n_A", n_A);
      current_statement__ = 38;
      context__.validate_dims("data initialization","error_i1","double",
           std::vector<size_t>{static_cast<size_t>(n_A)});
      error_i1_data__ = 
        Eigen::Matrix<double, -1, 1>::Constant(n_A,
          std::numeric_limits<double>::quiet_NaN());
      new (&error_i1) Eigen::Map<Eigen::Matrix<double, -1, 1>>(error_i1_data__.data(), n_A);
        
      
      {
        std::vector<local_scalar_t__> error_i1_flat__;
        current_statement__ = 38;
        error_i1_flat__ = context__.vals_r("error_i1");
        current_statement__ = 38;
        pos__ = 1;
        current_statement__ = 38;
        for (int sym1__ = 1; sym1__ <= n_A; ++sym1__) {
          current_statement__ = 38;
          stan::model::assign(error_i1, error_i1_flat__[(pos__ - 1)],
            "assigning variable error_i1", stan::model::index_uni(sym1__));
          current_statement__ = 38;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 38;
      stan::math::check_greater_or_equal(function__, "error_i1", error_i1, 0);
      current_statement__ = 39;
      stan::math::validate_non_negative_index("error_i2", "n_A", n_A);
      current_statement__ = 40;
      context__.validate_dims("data initialization","error_i2","double",
           std::vector<size_t>{static_cast<size_t>(n_A)});
      error_i2_data__ = 
        Eigen::Matrix<double, -1, 1>::Constant(n_A,
          std::numeric_limits<double>::quiet_NaN());
      new (&error_i2) Eigen::Map<Eigen::Matrix<double, -1, 1>>(error_i2_data__.data(), n_A);
        
      
      {
        std::vector<local_scalar_t__> error_i2_flat__;
        current_statement__ = 40;
        error_i2_flat__ = context__.vals_r("error_i2");
        current_statement__ = 40;
        pos__ = 1;
        current_statement__ = 40;
        for (int sym1__ = 1; sym1__ <= n_A; ++sym1__) {
          current_statement__ = 40;
          stan::model::assign(error_i2, error_i2_flat__[(pos__ - 1)],
            "assigning variable error_i2", stan::model::index_uni(sym1__));
          current_statement__ = 40;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 40;
      stan::math::check_greater_or_equal(function__, "error_i2", error_i2, 0);
      current_statement__ = 41;
      context__.validate_dims("data initialization","d_years","double",
           std::vector<size_t>{});
      d_years = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 41;
      d_years = context__.vals_r("d_years")[(1 - 1)];
      current_statement__ = 42;
      stan::math::validate_non_negative_index("ex_1", "n_A", n_A);
      current_statement__ = 43;
      context__.validate_dims("data initialization","ex_1","double",
           std::vector<size_t>{static_cast<size_t>(n_A)});
      ex_1_data__ = 
        Eigen::Matrix<double, -1, 1>::Constant(n_A,
          std::numeric_limits<double>::quiet_NaN());
      new (&ex_1) Eigen::Map<Eigen::Matrix<double, -1, 1>>(ex_1_data__.data(), n_A);
        
      
      {
        std::vector<local_scalar_t__> ex_1_flat__;
        current_statement__ = 43;
        ex_1_flat__ = context__.vals_r("ex_1");
        current_statement__ = 43;
        pos__ = 1;
        current_statement__ = 43;
        for (int sym1__ = 1; sym1__ <= n_A; ++sym1__) {
          current_statement__ = 43;
          stan::model::assign(ex_1, ex_1_flat__[(pos__ - 1)],
            "assigning variable ex_1", stan::model::index_uni(sym1__));
          current_statement__ = 43;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 44;
      stan::math::validate_non_negative_index("ex_2", "n_A", n_A);
      current_statement__ = 45;
      context__.validate_dims("data initialization","ex_2","double",
           std::vector<size_t>{static_cast<size_t>(n_A)});
      ex_2_data__ = 
        Eigen::Matrix<double, -1, 1>::Constant(n_A,
          std::numeric_limits<double>::quiet_NaN());
      new (&ex_2) Eigen::Map<Eigen::Matrix<double, -1, 1>>(ex_2_data__.data(), n_A);
        
      
      {
        std::vector<local_scalar_t__> ex_2_flat__;
        current_statement__ = 45;
        ex_2_flat__ = context__.vals_r("ex_2");
        current_statement__ = 45;
        pos__ = 1;
        current_statement__ = 45;
        for (int sym1__ = 1; sym1__ <= n_A; ++sym1__) {
          current_statement__ = 45;
          stan::model::assign(ex_2, ex_2_flat__[(pos__ - 1)],
            "assigning variable ex_2", stan::model::index_uni(sym1__));
          current_statement__ = 45;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 46;
      context__.validate_dims("data initialization","mu_mu_beta","double",
           std::vector<size_t>{});
      mu_mu_beta = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 46;
      mu_mu_beta = context__.vals_r("mu_mu_beta")[(1 - 1)];
      current_statement__ = 47;
      context__.validate_dims("data initialization","sigma_mu_beta","double",
           std::vector<size_t>{});
      sigma_mu_beta = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 47;
      sigma_mu_beta = context__.vals_r("sigma_mu_beta")[(1 - 1)];
      current_statement__ = 47;
      stan::math::check_greater_or_equal(function__, "sigma_mu_beta",
                                            sigma_mu_beta, 0);
      current_statement__ = 48;
      context__.validate_dims("data initialization","rate_sigma_beta",
          "double", std::vector<size_t>{});
      rate_sigma_beta = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 48;
      rate_sigma_beta = context__.vals_r("rate_sigma_beta")[(1 - 1)];
      current_statement__ = 48;
      stan::math::check_greater_or_equal(function__, "rate_sigma_beta",
                                            rate_sigma_beta, 0);
      current_statement__ = 49;
      context__.validate_dims("data initialization","mu_depth_imp","double",
           std::vector<size_t>{});
      mu_depth_imp = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 49;
      mu_depth_imp = context__.vals_r("mu_depth_imp")[(1 - 1)];
      current_statement__ = 50;
      context__.validate_dims("data initialization","sigma_depth_imp",
          "double", std::vector<size_t>{});
      sigma_depth_imp = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 50;
      sigma_depth_imp = context__.vals_r("sigma_depth_imp")[(1 - 1)];
      current_statement__ = 50;
      stan::math::check_greater_or_equal(function__, "sigma_depth_imp",
                                            sigma_depth_imp, 0);
      current_statement__ = 51;
      stan::math::validate_non_negative_index("depth_true_i1", "n_A", n_A);
      current_statement__ = 52;
      stan::math::validate_non_negative_index("delta_depth", "n_A", n_A);
      current_statement__ = 53;
      stan::math::validate_non_negative_index("depth_true_i2", "n_A", n_A);
      current_statement__ = 54;
      stan::math::validate_non_negative_index("growth", "n_A", n_A);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + 1 + n_A + n_A;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "corrosion_model_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      local_scalar_t__ mu_beta = DUMMY_VAR__;
      current_statement__ = 1;
      mu_beta = in__.template read<local_scalar_t__>();
      local_scalar_t__ sigma_beta = DUMMY_VAR__;
      current_statement__ = 2;
      sigma_beta = in__.template read_constrain_lb<local_scalar_t__, 
                     jacobian__>(0, lp__);
      Eigen::Matrix<local_scalar_t__, -1, 1> depth_true_i1 =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(n_A, DUMMY_VAR__);
      current_statement__ = 3;
      depth_true_i1 = in__.template read_constrain_lb<
                        Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(
                        0, lp__, n_A);
      Eigen::Matrix<local_scalar_t__, -1, 1> delta_depth =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(n_A, DUMMY_VAR__);
      current_statement__ = 4;
      delta_depth = in__.template read_constrain_lb<
                      Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(0,
                      lp__, n_A);
      Eigen::Matrix<local_scalar_t__, -1, 1> depth_true_i2 =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(n_A, DUMMY_VAR__);
      current_statement__ = 5;
      stan::model::assign(depth_true_i2,
        stan::math::add(depth_true_i1, delta_depth),
        "assigning variable depth_true_i2");
      Eigen::Matrix<local_scalar_t__, -1, 1> growth =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(n_A, DUMMY_VAR__);
      current_statement__ = 9;
      for (int i = 1; i <= n_A; ++i) {
        current_statement__ = 7;
        stan::model::assign(growth,
          ((stan::model::rvalue(depth_true_i2, "depth_true_i2",
              stan::model::index_uni(i)) -
             stan::model::rvalue(depth_true_i1, "depth_true_i1",
               stan::model::index_uni(i))) / d_years),
          "assigning variable growth", stan::model::index_uni(i));
      }
      {
        current_statement__ = 24;
        for (int n = 1; n <= n_A; ++n) {
          current_statement__ = 13;
          if (stan::math::logical_eq(
                stan::model::rvalue(ex_1, "ex_1", stan::model::index_uni(n)),
                0)) {
            current_statement__ = 11;
            lp_accum__.add(
              stan::math::normal_lpdf<propto__>(
                stan::model::rvalue(depth_i1, "depth_i1",
                  stan::model::index_uni(n)),
                stan::model::rvalue(depth_true_i1, "depth_true_i1",
                  stan::model::index_uni(n)),
                stan::model::rvalue(error_i1, "error_i1",
                  stan::model::index_uni(n))));
          } 
          current_statement__ = 16;
          if (stan::math::logical_eq(
                stan::model::rvalue(ex_1, "ex_1", stan::model::index_uni(n)),
                1)) {
            current_statement__ = 14;
            lp_accum__.add(
              stan::math::lognormal_lpdf<propto__>(
                stan::model::rvalue(depth_true_i1, "depth_true_i1",
                  stan::model::index_uni(n)), mu_depth_imp, sigma_depth_imp));
          } 
          current_statement__ = 19;
          if (stan::math::logical_eq(
                stan::model::rvalue(ex_2, "ex_2", stan::model::index_uni(n)),
                0)) {
            current_statement__ = 17;
            lp_accum__.add(
              stan::math::normal_lpdf<propto__>(
                stan::model::rvalue(depth_i2, "depth_i2",
                  stan::model::index_uni(n)),
                stan::model::rvalue(depth_true_i2, "depth_true_i2",
                  stan::model::index_uni(n)),
                stan::model::rvalue(error_i2, "error_i2",
                  stan::model::index_uni(n))));
          } 
          current_statement__ = 22;
          if (stan::math::logical_eq(
                stan::model::rvalue(ex_2, "ex_2", stan::model::index_uni(n)),
                1)) {
            current_statement__ = 20;
            lp_accum__.add(
              stan::math::lognormal_lpdf<propto__>(
                stan::model::rvalue(depth_true_i2, "depth_true_i2",
                  stan::model::index_uni(n)), mu_depth_imp, sigma_depth_imp));
          } 
        }
        current_statement__ = 25;
        lp_accum__.add(
          stan::math::lognormal_lpdf<propto__>(growth, mu_beta, sigma_beta));
        current_statement__ = 26;
        lp_accum__.add(
          stan::math::normal_lpdf<false>(mu_beta, mu_mu_beta, sigma_mu_beta));
        current_statement__ = 27;
        lp_accum__.add(
          stan::math::exponential_lpdf<false>(sigma_beta, rate_sigma_beta));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "corrosion_model_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      double mu_beta = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 1;
      mu_beta = in__.template read<local_scalar_t__>();
      double sigma_beta = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 2;
      sigma_beta = in__.template read_constrain_lb<local_scalar_t__, 
                     jacobian__>(0, lp__);
      Eigen::Matrix<double, -1, 1> depth_true_i1 =
         Eigen::Matrix<double, -1, 1>::Constant(n_A,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      depth_true_i1 = in__.template read_constrain_lb<
                        Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(
                        0, lp__, n_A);
      Eigen::Matrix<double, -1, 1> delta_depth =
         Eigen::Matrix<double, -1, 1>::Constant(n_A,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 4;
      delta_depth = in__.template read_constrain_lb<
                      Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(0,
                      lp__, n_A);
      Eigen::Matrix<double, -1, 1> depth_true_i2 =
         Eigen::Matrix<double, -1, 1>::Constant(n_A,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> growth =
         Eigen::Matrix<double, -1, 1>::Constant(n_A,
           std::numeric_limits<double>::quiet_NaN());
      out__.write(mu_beta);
      out__.write(sigma_beta);
      out__.write(depth_true_i1);
      out__.write(delta_depth);
      if (stan::math::logical_negation((stan::math::primitive_value(
            emit_transformed_parameters__) || stan::math::primitive_value(
            emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 5;
      stan::model::assign(depth_true_i2,
        stan::math::add(depth_true_i1, delta_depth),
        "assigning variable depth_true_i2");
      current_statement__ = 9;
      for (int i = 1; i <= n_A; ++i) {
        current_statement__ = 7;
        stan::model::assign(growth,
          ((stan::model::rvalue(depth_true_i2, "depth_true_i2",
              stan::model::index_uni(i)) -
             stan::model::rvalue(depth_true_i1, "depth_true_i1",
               stan::model::index_uni(i))) / d_years),
          "assigning variable growth", stan::model::index_uni(i));
      }
      if (emit_transformed_parameters__) {
        out__.write(depth_true_i2);
        out__.write(growth);
      } 
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      double CGR_pp = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 10;
      CGR_pp = stan::math::lognormal_rng(mu_beta, sigma_beta, base_rng__);
      out__.write(CGR_pp);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ mu_beta = DUMMY_VAR__;
      mu_beta = in__.read<local_scalar_t__>();
      out__.write(mu_beta);
      local_scalar_t__ sigma_beta = DUMMY_VAR__;
      sigma_beta = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma_beta);
      Eigen::Matrix<local_scalar_t__, -1, 1> depth_true_i1 =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(n_A, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= n_A; ++sym1__) {
        stan::model::assign(depth_true_i1, in__.read<local_scalar_t__>(),
          "assigning variable depth_true_i1", stan::model::index_uni(sym1__));
      }
      out__.write_free_lb(0, depth_true_i1);
      Eigen::Matrix<local_scalar_t__, -1, 1> delta_depth =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(n_A, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= n_A; ++sym1__) {
        stan::model::assign(delta_depth, in__.read<local_scalar_t__>(),
          "assigning variable delta_depth", stan::model::index_uni(sym1__));
      }
      out__.write_free_lb(0, delta_depth);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"mu_beta", "sigma_beta",
      "depth_true_i1", "delta_depth", "depth_true_i2", "growth", "CGR_pp"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
      std::vector<size_t>{}, std::vector<size_t>{static_cast<size_t>(n_A)},
      std::vector<size_t>{static_cast<size_t>(n_A)},
      std::vector<size_t>{static_cast<size_t>(n_A)},
      std::vector<size_t>{static_cast<size_t>(n_A)}, std::vector<size_t>{
      }};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "mu_beta");
    param_names__.emplace_back(std::string() + "sigma_beta");
    for (int sym1__ = 1; sym1__ <= n_A; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "depth_true_i1" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= n_A; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "delta_depth" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= n_A; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "depth_true_i2" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= n_A; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "growth" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "CGR_pp");
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "mu_beta");
    param_names__.emplace_back(std::string() + "sigma_beta");
    for (int sym1__ = 1; sym1__ <= n_A; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "depth_true_i1" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= n_A; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "delta_depth" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= n_A; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "depth_true_i2" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= n_A; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "growth" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "CGR_pp");
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"mu_beta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_beta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"depth_true_i1\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_A) + "},\"block\":\"parameters\"},{\"name\":\"delta_depth\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_A) + "},\"block\":\"parameters\"},{\"name\":\"depth_true_i2\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_A) + "},\"block\":\"transformed_parameters\"},{\"name\":\"growth\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_A) + "},\"block\":\"transformed_parameters\"},{\"name\":\"CGR_pp\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"mu_beta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_beta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"depth_true_i1\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_A) + "},\"block\":\"parameters\"},{\"name\":\"delta_depth\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_A) + "},\"block\":\"parameters\"},{\"name\":\"depth_true_i2\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_A) + "},\"block\":\"transformed_parameters\"},{\"name\":\"growth\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_A) + "},\"block\":\"transformed_parameters\"},{\"name\":\"CGR_pp\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  (((1 + 1) + n_A) + n_A);
      const size_t num_transformed = emit_transformed_parameters * 
  (n_A + n_A);
      const size_t num_gen_quantities = emit_generated_quantities * 1;
      const size_t num_to_write = num_params__ + num_transformed +
        num_gen_quantities;
      std::vector<int> params_i;
      vars = Eigen::Matrix<double, Eigen::Dynamic, 1>::Constant(num_to_write,
        std::numeric_limits<double>::quiet_NaN());
      write_array_impl(base_rng, params_r, params_i, vars,
        emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  (((1 + 1) + n_A) + n_A);
      const size_t num_transformed = emit_transformed_parameters * 
  (n_A + n_A);
      const size_t num_gen_quantities = emit_generated_quantities * 1;
      const size_t num_to_write = num_params__ + num_transformed +
        num_gen_quantities;
      vars = std::vector<double>(num_to_write,
        std::numeric_limits<double>::quiet_NaN());
      write_array_impl(base_rng, params_r, params_i, vars,
        emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
     constexpr std::array<const char*, 4> names__{"mu_beta", "sigma_beta",
      "depth_true_i1", "delta_depth"};
      const std::array<Eigen::Index, 4> constrain_param_sizes__{1, 1, 
       n_A, n_A};
      const auto num_constrained_params__ = std::accumulate(
        constrain_param_sizes__.begin(), constrain_param_sizes__.end(), 0);
    
     std::vector<double> params_r_flat__(num_constrained_params__);
     Eigen::Index size_iter__ = 0;
     Eigen::Index flat_iter__ = 0;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       for (Eigen::Index i = 0; i < constrain_param_sizes__[size_iter__]; ++i) {
         params_r_flat__[flat_iter__] = param_vec__[i];
         ++flat_iter__;
       }
       ++size_iter__;
     }
     vars.resize(num_params_r__);
     transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits() 
     }; } 
using stan_model = corrosion_model_model_namespace::corrosion_model_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return corrosion_model_model_namespace::profiles__;
}

#endif


